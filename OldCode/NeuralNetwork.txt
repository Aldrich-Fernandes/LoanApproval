import numpy as np

from DataHandle import *

class NeuralNetwork:
    def __init__(self):
        self.TrainX, self.TrainY, self.TestX, self.TestY = PreProcess(100).getData()
        self.train()
        
    def train(self):
        Hiddenlayer = Layer(11, 7, ReLU())
        Outputlayer = Layer(7, 2, Softmax())

        Hiddenlayer.forward(self.TrainX)
        Outputlayer.forward(Hiddenlayer.output)
        
        self.result = Outputlayer.output

        self.CompareResults()

    def CompareResults(self):
        for x in range(10):
            print(f"Predicted: {self.result[x]} Actual: {self.TrainY[x]}")
        
class Layer:
    def __init__(self, NoOfInputs, NoOfNeurons, activation):
        self.weights = 0.01 * np.random.randn(NoOfInputs, NoOfNeurons)
        self.biases = np.zeros((1, NoOfNeurons))
        self.activation = activation

        print(f"Weights: {self.weights.shape} \nBiases: {self.biases.shape}")
        input()

    def forward(self, inputs):
        self.output = np.dot(inputs, self.weights) + self.biases
        self.applyActivation()

    def applyActivation(self):
        self.output = self.activation.forward(self.output)

class ReLU:
    def forward(self, inputs):
        return np.maximum(0, inputs)

class Softmax:
    def forward(self, inputs):
        exp_values = np.exp(inputs - np.max(inputs, axis=1, keepdims=True))

        probabilites = exp_values / np.sum(exp_values, axis=1, keepdims=True)

        return probabilites