from NeuralNetwork import NeuralNetwork
from DataHandle import PreProcess
from UI import GUI

def getData():
    UserData = []
    DataToGet = {'Gender: ': ["Male", "Female"],
             'Married: ': ["Yes", "No"],
             'Dependents (eg. number of childern/elderly): ': ["0", "1", "2", "+3"],
             'Education: ': ["Graduate", "Not Graduate"],
             'Self employed: ': ["Yes", "No"],
             'Applicant monthly income: ': -1,
             'Coapplicant monthly income: ': -1,
             'Loan amount (in thousands): ': -1,
             'Loan amount term (months): ': -1,
             'Credit history meet guildlines?: ': ["Yes", "No"],
             'Property area: ': ["Urban", "Semiurban", "Rural"]}
    
    print("Please enter the following data.")
    for key, data in DataToGet.items():
        print("\n------------------------------------------------------\n",key)
        if type(data) == list:
            for x, val in enumerate(data):
                print(f" {x+1}). {val}")
            choice = int(input("Choice: "))-1
            UserData.append(data[choice])
        else:
            UserData.append(int(input("Enter Data: ")))
    return UserData

def SaveModel(Model, PreProcessor):
    FileName = input("Please enter a model name: ").lower()

    file = open(f"DataSet/Models/{FileName}.txt", "w")
    file.write(str(Model.Hiddenlayer.weights)+"\n")
    file.write(str(Model.Hiddenlayer.biases)+"\n")
    file.write(str(Model.Outputlayer.weights)+"\n")
    file.write(str(Model.Outputlayer.biases)+"\n")
    file.write(str(Model.Accuracy)+"\n")
    file.write(str(PreProcessor.ScalingData))
    file.close()

def LoadModel(FileName):
    try:
        PreProcessor = PreProcess()
        Model = NeuralNetwork()

        file = open(f"DataSet/Models/{FileName}.txt")
        Model.Hiddenlayer.weights = eval(file.readline().rstrip())
        Model.Hiddenlayer.biases = eval(file.readline().rstrip())
        Model.Outputlayer.weights = eval(file.readline().rstrip())
        Model.Outputlayer.biases = eval(file.readline().rstrip())
        Model.Accuracy = eval(file.readline().rstrip())
        PreProcessor.ScalingData = eval(file.readline().rstrip())
        return Model, PreProcessor
    
    except FileNotFoundError:
        print("File Doesnt exist. Returning to menu...")
        main()

        
def setup():
    defaultFile = "default" # save in a settings folder
    
    if choice == 1:
        Model, PreProcessor = LoadModel(FileName=defaultFile)
    elif choice == 2:
        defaultFile = input("Enter Model name: ").lower()
        Model, PreProcessor = LoadModel(defaultFile)
    elif choice == 3:
        PreProcessor = PreProcess(New=True)
        TrainX, TrainY, TestX, TestY = PreProcessor.getData()

        Model = NeuralNetwork()
        Model.train(TrainX, TrainY, show=True)

        CanSave = str(input("Save the model? (Y/N): ")).lower()
        if CanSave == "y":
            SaveModel(Model, PreProcessor)

    print(f"Model Loaded Succesfully. (Acc={round(Model.Accuracy*100, 2)}%)")
    return Model, PreProcessor

def main():
    myGUI = GUI()
    Model, PreProcessor = setup()

    UserData = myGUI.getUserData()
    UserData = PreProcessor.encode(UserData)
    Model.Predict(UserData)

    print("Thank you for using this service.")

main()