from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

from sklearn.ensemble import RandomForestClassifier


from DataHandle import PreProcess

# Data generated by my own preprocessing algoirhtms
PreProcessor = PreProcess()
PreProcessor.newDataset()
TrainX, TrainY, TestX, TestY = PreProcessor.getData(split=0)
# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(TrainX, TrainY, test_size=0.2, random_state=42)

def LogReg():
    acc = []
    for x in range(8):
        
        # Create a logistic regression model
        model = LogisticRegression()

        # Train the model
        model.fit(X_train, y_train)

        # Make predictions on the test set
        y_pred = model.predict(X_test)

        # Evaluate the model
        accuracy = accuracy_score(y_test, y_pred)
        acc.append(accuracy)

    print(f"LogReg Accuracy: {round(sum(acc)/len(acc), 4)}\n\n")

def RandForest():
    acc = []
    for _ in range(8):
        model = RandomForestClassifier(n_estimators=100, random_state=42)
        model.fit(X_train, y_train)
        predictions = model.predict(X_test)

        # Evaluate the model
        accuracy = accuracy_score(y_test, predictions)
        acc.append(accuracy)
    print(f"RandForest Accuracy: {round(sum(acc)/len(acc), 4)}")

LogReg()
RandForest()